<?xml version="1.0" encoding="utf-8" ?>
<Window x:Class="SimDas.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:views="clr-namespace:SimDas.Views"
        xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
        Icon="/Resources/ara.ico"
        Title="SimDas - Differential Algebraic Equation Solver"
        Height="1024" Width="1280"
        MinHeight="600" MinWidth="800"
        WindowStartupLocation="Manual">

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Tool Bar -->
        <ToolBar Grid.Row="0" Background="{DynamicResource SecondaryBrush}">
            <!-- Solve Button -->
            <Button Command="{Binding SolveCommand}">
                <StackPanel Orientation="Horizontal">
                    <Image Source="/Resources/play.png" Width="16" Height="16">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Style.Triggers>
                                    <!-- IsEnabled가 False일 때 Opacity를 0.1로 설정 -->
                                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="False">
                                        <Setter Property="Opacity" Value="0.1"/>
                                    </DataTrigger>
                                    <!-- IsEnabled가 True일 때 Opacity를 1.0으로 설정 -->
                                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                                        <Setter Property="Opacity" Value="1.0"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                    <TextBlock Text="Solve" Margin="5,0,0,0"/>
                </StackPanel>
            </Button>
            <!-- Pause Button -->
            <Button Command="{Binding PauseCommand}" Width="70">
                <StackPanel Orientation="Horizontal">
                    <Image Source="/Resources/resume.png" Width="16" Height="16">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Style.Triggers>
                                    <!-- 버튼이 비활성화되었을 때 투명도 조정 -->
                                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="False">
                                        <Setter Property="Opacity" Value="0.1"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                                        <Setter Property="Opacity" Value="1.0"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                    <TextBlock Margin="5,0,0,0">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="Text" Value="Pause"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsPaused}" Value="True">
                                        <Setter Property="Text" Value="Resume"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </StackPanel>
            </Button>
            <!-- Stop Button -->
            <Button Command="{Binding StopCommand}">
                <StackPanel Orientation="Horizontal">
                    <Image Source="/Resources/stop.png" Width="16" Height="16">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Style.Triggers>
                                    <!-- IsEnabled가 False일 때 Opacity를 0.1로 설정 -->
                                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="False">
                                        <Setter Property="Opacity" Value="0.1"/>
                                    </DataTrigger>
                                    <!-- IsEnabled가 True일 때 Opacity를 1.0으로 설정 -->
                                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                                        <Setter Property="Opacity" Value="1.0"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                    <TextBlock Text="Stop" Margin="5,0,0,0"/>
                </StackPanel>
            </Button>
            <Separator/>
            <!-- 
            <Button Command="{Binding SaveResultsCommand}">
                <StackPanel Orientation="Horizontal">
                    <Image Source="/Resources/save.png" Width="16" Height="16">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="False">
                                        <Setter Property="Opacity" Value="0.1"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                                        <Setter Property="Opacity" Value="1.0"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                    <TextBlock Text="Save Results" Margin="5,0,0,0"/>
                </StackPanel>
            </Button>
            -->
            
            <!-- Clear Button -->
            <Button Command="{Binding InputClearCommand}">
                <StackPanel Orientation="Horizontal">
                    <Image Source="/Resources/clear.png" Width="16" Height="16">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Style.Triggers>
                                    <!-- IsEnabled가 False일 때 Opacity를 0.1로 설정 -->
                                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="False">
                                        <Setter Property="Opacity" Value="0.1"/>
                                    </DataTrigger>
                                    <!-- IsEnabled가 True일 때 Opacity를 1.0으로 설정 -->
                                    <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="True">
                                        <Setter Property="Opacity" Value="1.0"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                    <TextBlock Text="Clear All" Margin="5,0,0,0"/>
                </StackPanel>
            </Button>
        </ToolBar>

        <!-- Main Content -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="200*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="200*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="200*"/>
            </Grid.ColumnDefinitions>

            <Border x:Name="SolvingOverlay" 
                Grid.Column="2" 
                Grid.Row="0"
                Grid.RowSpan="8"
                Panel.ZIndex="1"
                Background="#80FFFFFF"
                Visibility="{Binding IsSolving, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay}"> 
                <StackPanel x:Name="SolvingStackPanel"
                    VerticalAlignment="Center" 
                    HorizontalAlignment="Center">
                    <Image x:Name="SolvingImage"
                        Source="/Resources/no-data.png" 
                        Opacity="0.5"
                        MaxWidth="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}, Converter={StaticResource HalfSizeConverter}}"
                        MaxHeight="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}, Converter={StaticResource HalfSizeConverter}}" 
                    />
                    <TextBlock x:Name="SolvingTextBlock"
                        Text="Calculation in progress"
                        FontSize="32"
                        HorizontalAlignment="Center"
                        Margin="0,10,0,0"
                        Opacity="0.5"
                        Foreground="#666666"
                    />
                </StackPanel>
            </Border>

            <!-- Left Panel - Logs -->
            <Grid Grid.Column="0">
                <views:LogView DataContext="{Binding LogViewModel}" Background="{DynamicResource PrimaryBrush}" />
            </Grid>

            <!-- Splitter -->
            <GridSplitter Grid.Column="1" 
                         Width="5" 
                         HorizontalAlignment="Center" 
                         VerticalAlignment="Stretch" 
                         Background="LightGray"/>

            <!-- Middle Panel - Input and Settings -->
            <Grid Grid.Column="2" Background="MediumPurple">
                <Grid.RowDefinitions>
                    <RowDefinition Height="400*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="80*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="300*"/>
                </Grid.RowDefinitions>

                <views:InputView Grid.Row="0" 
                                DataContext="{Binding InputViewModel}"/>

                <GridSplitter Grid.Row="1" 
                  Height="3"
                  HorizontalAlignment="Stretch"
                  Background="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>

                <views:SampleView Grid.Row="2"
                             DataContext="{Binding SampleViewModel}"/>

                <GridSplitter Grid.Row="3" 
                  Height="3"
                  HorizontalAlignment="Stretch"
                  Background="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>

                <views:SolverSettingsView Grid.Row="4" 
                             DataContext="{Binding SolverSettingsViewModel}"/>
            </Grid>

            <!-- Splitter -->
            <GridSplitter Grid.Column="3" 
                         Width="5" 
                         HorizontalAlignment="Center" 
                         VerticalAlignment="Stretch" 
                         Background="LightGray"/>

            <!-- Right Panel - Results -->
            <views:ResultView Grid.Column="4" 
                            DataContext="{Binding ResultViewModel}" Background="MediumPurple"/>
        </Grid>

        <!-- Status Bar -->
        <StatusBar Grid.Row="2" Background="{DynamicResource SecondaryBrush}">
            <StatusBarItem>
                <ProgressBar Width="100" 
                    Height="15" 
                    Value="{Binding Progress, Mode=OneWay}"/>
            </StatusBarItem>
            <Separator/>
            <StatusBarItem>
                <TextBlock Text="{Binding StatusMessage}"/>
            </StatusBarItem>
            <StatusBarItem>
                <TextBlock Text="{Binding Progress, StringFormat={}{0:F1}%}"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>